#include<iostream>
#include<cmath>
using namespace std;

int dx[4] = {0,0,1,0};
int dy[4] = {0,1,-1,1};
int n, r, c;
int ans = -1;
void Z_search(int s,int t, int size)
{
	if (size == 1)//base 일때
	{
		for (int i = 0; i < 4; i++)
		{
			s+= dx[i];
			t+= dy[i];
			ans++;
			if (s == r && t == c)
			{
				cout << ans << endl;
			}
		}
		return;
	}
	else //계속 재귀 실행
	{
		if (r-s < pow(2, size - 1) && c -t< pow(2, size - 1))
		{
			//cout << "1" << endl;
			Z_search(s, t, size - 1);
		}
		else if (r-s < pow(2, size- 1) && c-t>= pow(2, size - 1))
		{
			//cout << "2" << endl;
			ans += (pow(2, size - 1) * pow(2, size - 1));
			Z_search(s, t + pow(2, size - 1), size - 1);
		}
		else if (r-s>= pow(2, size - 1) && c-t < pow(2, size - 1))
		{
			//cout << "3" << endl;
			ans += 2*(pow(2, size - 1) * pow(2, size - 1));
			Z_search(s + pow(2, size - 1), t, size - 1);
		}
		else
		{
			//cout << "4" << endl;
			ans += 3 * (pow(2, size - 1) * pow(2, size - 1));
			Z_search(s + pow(2, size - 1), t + pow(2, size - 1), size - 1);
		}
	}
}
int main()
{
	cin >> n >> r >> c;
	if (n > 1)
	{
		if (r < pow(2, n - 1) && c < pow(2, n - 1))//1사분면
		{
			//cout << "1" << endl;
			Z_search(0, 0, n - 1);
		}
		else if (r < pow(2, n - 1) && c>= pow(2, n - 1))
		{
			//cout << "2" << endl;
			ans +=(pow(2, n - 1)* pow(2, n - 1));
			Z_search(0, pow(2, n - 1), n - 1);
		}
		else if (r >= pow(2, n - 1)&& c < pow(2, n - 1))
		{
			//cout << "3" << endl;
			ans += (2*(pow(2, n - 1) * pow(2, n - 1)));
			Z_search(pow(2, n - 1), 0, n - 1);
		}
		else
		{
			//cout << "4" << endl;
			ans += (3 * (pow(2, n - 1) * pow(2, n - 1)));
			Z_search(pow(2, n - 1), pow(2, n - 1), n - 1);
		}
	}
	else if(n==1)
	{
		int q = 0;
		int p = 0;
		for (int i = 0; i < 4; i++)
		{
			q+= dx[i];
			p += dy[i];
			ans++;
			if (q == r && p == c)
			{
				cout << ans << endl;
			}
		}
	}
	return 0;
}
