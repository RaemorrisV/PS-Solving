#include<iostream>
#include<algorithm>
#include<queue>
#include<limits.h>
#include<tuple>
#define INF INT_MAX-1
using namespace std;

int cave[125][125];
int c[125][125];
int n;
int dx[4] = {-1,1,0,0};  //상하좌우 
int dy[4] = {0,0,-1,1};
int cnt = 1;
bool valid(int r, int c)
{
	if (r >= 0 && r < n && c >= 0 && c < n)return true;
	return false;
 }
void dijkstra(int s_r, int s_c)
{
	c[s_r][s_c] = cave[s_r][s_c];
	priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<tuple<int, int, int>>> q;
	q.push({ cave[s_r][s_c],s_r,s_c });
	while (!q.empty())
	{
		int cur_r = get<1>(q.top());
		int cur_c = get<2>(q.top());
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int next_r = cur_r + dx[i];
			int next_c = cur_c + dy[i];
			int next_cost = cave[cur_r + dx[i]][cur_c + dy[i]];
			if (valid(next_r, next_c) && c[next_r][next_c] > c[cur_r][cur_c] + next_cost)
			{
				c[next_r][next_c] = c[cur_r][cur_c] + next_cost;
				q.push({ c[next_r][next_c] ,next_r,next_c });
			}
		}
	}
}
int main()
{
	while(1)
	{
		cin >> n;
		if (n == 0)break;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cin >> cave[i][j];
			}
		}
		fill(&c[0][0], &c[n-1][n], INF); 
		dijkstra(0, 0);
		cout << "Problem" << " " << cnt << ":" << " " << c[n - 1][n - 1] << endl;
		fill(&cave[0][0], &cave[n-1][n], 0);
		cnt++;

	}

	return 0;
}
