#include<iostream>
#include<cmath>
#include<vector>
#include<tuple>
#include<cmath>
#include<cstring>
#include<algorithm>
using namespace std;

int dx[5] = { 0,0,1,0,-1 };
int dy[5] = { 0,-1,0,1,0 };
int ans = 100;
int n, m;// 행 열
int room[8][8];
vector<tuple<int, int, int>>cctv; // 좌표와 cctv 종류
void copy(int copied[8][8], int origin[8][8],int a,int b) { 
    for (int i = 0; i < a; i++) {
        for (int j = 0; j < b; j++) {
            copied[i][j] = origin[i][j];
        }
    }
}
void dfs(int x, int y, int z, int cnt)
{
    if (cnt == cctv.size() - 1)//base case
    {
        int count = 0;
        for (int i = 0; i < n; i++)// 사각지대 구하는 부분
        {
            for (int j = 0; j < m; j++)
            {
                if (room[i][j] == 0)
                {
                    count++;
                }
            }
        }
       /* cout << ":" << endl;
        for (int i = 0; i < n; i++)// 사각지대 구하는 부분
        {
            for (int j = 0; j < m; j++)
            {
                cout << room[i][j];
            }
            cout << endl;
        }
        cout << count << endl;
      */
        if (ans > count)
        {
            ans = count;        
        }
        return;
    }
    else
    {
        if (z == 1)//2 2 
        {
            int arr[8][8];
            copy(arr, room,n,m);
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);

            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt); //왼쪽으로 가는 경우는 모두 측정함
            cnt--;
            copy(room, arr,n,m);
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
        }
        else if (z == 2)
        {
            int arr[8][8];
            copy(arr, room,n,m);
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
        }
        else if (z == 3)
        {
            int arr[8][8];
            copy(arr,room,n,m);
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
        }
        else if (z == 4)
        {
        int arr[8][8];
            copy(arr, room,n,m);
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
        }
        else if (z == 5)
        {
            int arr[8][8];
            copy(arr, room,n,m);
            for (int i = y + 1; i < m; i++)//오른쪽으로 가는 경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = x - 1; i >= 0; i--)//위쪽으로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            for (int i = y - 1; i >= 0; i--)//왼쪽으로 가는경우
            {
                if (room[x][i] == 6)break;
                else
                {
                    room[x][i] = 8;
                }
            }
            for (int i = x + 1; i < n; i++)//아래로 가는경우
            {
                if (room[i][y] == 6)break;
                else
                {
                    room[i][y] = 8;
                }
            }
            cnt++;
            dfs(get<0>(cctv[cnt]), get<1>(cctv[cnt]), get<2>(cctv[cnt]), cnt);
            cnt--;
            copy(room, arr,n,m);
        }
    }
}
int main()
{
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> room[i][j]; //총 이동시간과 BC의 개수
            if (room[i][j] != 0 && room[i][j] != 6)
            {
                cctv.push_back(make_tuple(i, j, room[i][j]));
            }
        }
    }
    cctv.push_back(make_tuple(-1, -1, -1));//vector 범위 넘기는거 방지용으로 넣어줌
    dfs(get<0>(cctv[0]), get<1>(cctv[0]), get<2>(cctv[0]), 0); //첫번째 좌표 넣고 시시티비 종류 까지 넣어줌
    cout << ans << endl;
    return 0;
}
