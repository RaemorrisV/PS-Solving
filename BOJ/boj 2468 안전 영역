#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int no_color_blindness;
int color_blindness;
bool visit[100][100];
int graph[100][100];
int n;
int dx[4] = {-1,1,0,0}; //상하좌우 순
int dy[4] = {0,0,-1,1};
int maxarea;
bool valid(int row, int col)
{
	if (row < n && col < n && row >= 0 && col >= 0 )
	{
		return true;
	}
	else
	{
		return false;
	}
}
void bfs(int row, int col)
{
	queue<pair<int, int>>q;
	q.push({ row,col });
	while (!q.empty())
	{
		int a, b;
		a = q.front().first;
		b = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			if (valid(a+dx[i],b+dy[i]) && (visit[a+dx[i]][b+dy[i]] == false))
			{
				visit[a + dx[i]][b + dy[i]] = true;
				q.push({ a + dx[i],b + dy[i] });
		   }
		}
	}
}
int main()
{
	int min = 101;
	int max = 0;
	int area = 0;
	cin >> n;
	for (int i = 0; i < n; i++)//행
	{
		for (int j = 0; j < n; j++)//열
		{
			int a;
			cin >> a;
			graph[i][j] = a;
			if (min > a)
			{
				min = a;
			}
			if (max < a)
			{
				max = a;
			}
		}
	}
	for(int k=min-1;k<=max+1;k++)
	{	
		for (int i = 0; i < n; i++)//행
		{
			for (int j = 0; j < n; j++)//열
			{
				if (graph[i][j] <= k)
				{
					visit[i][j] = true;
				}
			}
		}
		for (int i = 0; i < n; i++)//행
		{
			for (int j = 0; j < n; j++)//열
			{
				if (visit[i][j] == false)
				{
					visit[i][j] = true;
					bfs(i, j);
					area++;
				}
			}
		}
		memset(visit, false, sizeof(visit));
		if (maxarea < area)
		{
			maxarea = area;
		}
		area = 0;
	}
	cout << maxarea << "\n";
	return 0;
}
