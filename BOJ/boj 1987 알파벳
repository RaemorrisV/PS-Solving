#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

bool visit[20][20];
char graph[20][20];
int r, c;
int dx[4] = {-1,1,0,0}; //상하좌우 순
int dy[4] = {0,0,-1,1};
int maxarea = 1;
int cnt = 1;
vector<char>route;

bool valid(int row, int col)
{
	if (row < r && col < c && row >= 0 && col >= 0 )
	{
		return true;
	}
	else
	{
		return false;
	}
}
void dfs(int row, int col)
{
	for (int i = 0; i < 4; i++)
	{
		auto it = find(route.begin(), route.end(), graph[row + dx[i]][col + dy[i]]);
		if (valid(row + dx[i], col + dy[i]) && (visit[row + dx[i]][col + dy[i]] == false)&& (it==route.end()))
		{
			visit[row + dx[i]][col + dy[i]] = true;
			route.push_back(graph[row + dx[i]][col + dy[i]]);
			cnt++;
			dfs(row + dx[i], col + dy[i]);
			//dfs 
			if (maxarea < cnt)
			{
				maxarea = cnt;
			}
			cnt--;
			visit[row + dx[i]][col + dy[i]] = false;
			route.pop_back();
		}
	}
}
void bfs(int row, int col)
{
	queue<pair<int, int>>q;
	q.push({ row,col });
	while (!q.empty())
	{
		int a, b;
		a = q.front().first;
		b = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			if (valid(a+dx[i],b+dy[i]) && (visit[a+dx[i]][b+dy[i]] == false))
			{
				visit[a + dx[i]][b + dy[i]] = true;
				q.push({ a + dx[i],b + dy[i] });
		   }
		}
	}
}
int main()
{
	cin>>r>>c;
	for (int i = 0; i < r; i++)//행
	{
		for (int j = 0; j < c; j++)//열
		{
			char a;
			cin >> a;
			graph[i][j] = a;
		}
	}
	visit[0][0] = true;
	route.push_back(graph[0][0]);
	dfs(0, 0);
	cout << maxarea << "\n";
	return 0;
}
