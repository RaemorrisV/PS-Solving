#include<iostream>
#include<limits.h>
#include<queue>
#include<vector>
#include<algorithm>
#define INF INT_MAX
using namespace std;
vector<vector<pair<int, int>>>graph(1001);
int come[1001];
int c_time[1001];
int n, m, x;
int MAX = INT_MIN;
void dijkstra(int start)
{
	come[start] = 0;
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;
	q.push({ 0,start });
	while (!q.empty())
	{
		int cur = q.top().second;
		q.pop();
		for (auto it : graph[cur])
		{
			int next = it.first;
			int next_cost = it.second;
			if (come[next] > come[cur] + next_cost)
			{
				come[next] = come[cur] + next_cost;
				q.push({come[next],next });
			}
		}
	}
}
int main()
{
	cin >> n >> m>>x;//정점 간선수 목적지
	for (int i = 0; i < m; i++)
	{
		int s, e, w;
		cin >> s >> e >> w;
		graph[s].push_back({ e,w });
	}
	for (int i = 1; i <= n; i++)
	{
		fill(come, come + n + 1, INF);
		dijkstra(i);
		c_time[i] = come[x];
	}
	fill(come, come + n + 1, INF);
	dijkstra(x);
	for (int i = 1; i <= n; i++)
	{
		if (MAX < c_time[i] + come[i])
		{
			MAX = c_time[i] + come[i];
		}
	}
	cout << MAX << endl;
	return 0;
}
